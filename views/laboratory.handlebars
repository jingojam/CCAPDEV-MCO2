<body>        
        <div class="container">
            <div class="create_options">

                <a href="/create?userId={{userId}}&baseId={{baseId}}"><div id="option_1">
                    <p>< Return to Filter Reservations</p>
                
                </div></a>
            </div>
            
            <div class="create_content">

                <h1>{{lab.lab_name}}</h1>

                <div class="reserve-info">
                    <div class="date-prompt">
                        <form>
                            <h3>Choose a date:</h3>
                            <select name="Days" id="Days">
                                {{#each days}}
                                    <option value="{{this}}">{{this}}</option>
                                {{/each}}
                            </select>
                            <h3>Choose start time:</h3>
                            <select name="Hours" id="Hours">
                                {{#each startTimes}}
                            <option value="{{this.value}}">{{this.label}}</option>
                                {{/each}}
                            </select>
                            <h3>Select end hours</h3>
                            <select name="EndHours" id="EndHours">
                                {{#each endTimes}}
                                    <option value="{{this.value}}">{{this.label}}</option>
                                {{/each}}
                            </select>
                        </form>

                        <div class="anonymous-option">
                            <label>
                                <input type="checkbox" id="anonymous" name="anonymous">
                                Reserve anonymously
                            </label>
                        </div>
                    </div>
                    
                    <div class="seat-table">
                        <table id="reservation-table" class="reservation-table">
                            <thead>
                                <tbody>
                                    {{#each seats}}
                                    {{!-- Check if this seat is reserved --}}
                                    {{#if (isReserved ../reservations this.seatNumber ../selectedDate ../startTime ../endTime)}}
                                        <tr>
                                        <td>{{this.seatNumber}}</td>
                                        <td>Reserved</td>
                                        <td><button class="reserve-lab disabled" disabled>Reserved</button></td>
                                        </tr>
                                    {{else}}
                                        <tr>
                                        <td>{{this.seatNumber}}</td>
                                        <td>{{this.vacancy}}</td>
                                        <td>
                                            <button class="reserve-lab" data-seat="{{this.seatNumber}}">
                                            {{this.reserveText}}
                                            </button>
                                        </td>
                                        </tr>
                                    {{/if}}
                                    {{/each}}
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </body>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    let selectedDate = null;
    let selectedStartTime = null;
    let selectedEndTime = null;

    const daysEl = document.getElementById('Days');
    const hoursEl = document.getElementById('Hours');
    const endHoursEl = document.getElementById('EndHours');

    if (!daysEl || !hoursEl || !endHoursEl) {
      console.warn("One or more dropdowns not found");
      return;
    }

    /* ---------- NEW FUNCTION: filter endâ€‘time options ---------- */
    function filterEndTimes() {
      const start = Number(selectedStartTime); // e.g., 900, 1000
      let earliestValid = null;

      Array.from(endHoursEl.options).forEach(opt => {
        const end = Number(opt.value);
        const allowed = end > start;

        opt.disabled = !allowed;
        opt.hidden = !allowed;

        if (allowed && earliestValid === null) earliestValid = opt;
      });

      if (selectedEndTime === null || Number(selectedEndTime) <= start) {
        if (earliestValid) {
          earliestValid.selected = true;
          selectedEndTime = earliestValid.value;
          console.log("Auto-selected new end time:", selectedEndTime);
        }
      }
    }

    /* ---------------- EXISTING LISTENERS ---------------- */
    daysEl.addEventListener('change', function () {
      selectedDate = this.value;
      console.log("Selected date:", selectedDate);
    });

    hoursEl.addEventListener('change', function () {
      selectedStartTime = this.value;
      console.log("Selected start time:", selectedStartTime);
      filterEndTimes();
    });

    endHoursEl.addEventListener('change', function () {
      selectedEndTime = this.value;
      console.log("Selected end time:", selectedEndTime);
    });

    /* ---------- INITIALISE ON PAGE LOAD ---------- */
    selectedStartTime = hoursEl.value;
    selectedEndTime = endHoursEl.value;
    filterEndTimes();

    /* ---------- BUTTON CLICK HANDLER ---------- */
    const reserveButtons = document.querySelectorAll('.reserve-lab');

    reserveButtons.forEach(button => {
      button.addEventListener('click', async function () {
        const seatString = this.dataset.seat;
        const numericOnly = seatString.replace(/[^0-9]/g, ''); // removes everything except digits
        const seatNumber = parseInt(numericOnly, 10); // always use radix 10

        const selectedDate = document.getElementById('Days').value;
        const selectedStartTime = document.getElementById('Hours').value;
        const selectedEndTime = document.getElementById('EndHours').value;

        const urlParams = new URLSearchParams(window.location.search);
        const baseId = urlParams.get('baseId');

        // Make sure all required fields are present
        if (!selectedDate || !selectedStartTime || !selectedEndTime || !baseId || !seatNumber) {
          alert("Please make sure all fields are selected and you are logged in.");
          return;
        }

        const reservationData = {
          lab_name: "{{ lab.lab_name }}",
          lab_sched: selectedDate, // This is a string like "2025-04-05"
          startTime: selectedStartTime, // e.g., "0900"
          endTime: selectedEndTime,     // e.g., "1000"
          seat: parseInt(seatNumber),   // Convert to number
          lab_url: "{{ lab.lab_url }}",
          reservedBy: baseId,
          belongsTo: userId // <---------- THIS IS THE PART I CHANGED
        };

        console.log("Sending reservation:", reservationData);
        
        // For Testing
        console.log("Raw seat number:", seatNumber);
        console.log("Parsed seat number:", parseInt(seatNumber));
        try {
          const response = await fetch('/api/reservations', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(reservationData)
          });

          const result = await response.json();

          if (result.success) {
            this.textContent = "Reserved By: {{ user.first_name }}";
            this.disabled = true;
            this.classList.add('reserved');
          } else {
            alert(result.message || "Reservation failed");
          }
        } catch (err) {
          console.error("Error making reservation:", err);
          alert("An error occurred while reserving.");
        }
      });
    });
  });
</script>